package org.fh.general.ecom.product.controller;

import org.fh.general.ecom.common.base.BaseVO;
import org.fh.general.ecom.common.base.PagingVO;
import org.fh.general.ecom.common.dto.product.appraise.InputProjectAppraiseAddDTO;
import org.fh.general.ecom.common.dto.product.appraise.InputProjectAppraiseListDTO;
import org.fh.general.ecom.common.dto.product.appraise.OutputProjectAppraiseListDTO;
import org.fh.general.ecom.common.dto.product.appraise.OutputProjectAppriaiseDetailDTO;
import org.fh.general.ecom.common.dto.product.consulting.InputConsultingProjectAddDTO;
import org.fh.general.ecom.common.dto.product.mongo.InputMongoDBProjectDTO;
import org.fh.general.ecom.common.dto.product.mongo.OutputMongoDBPageDTO;
import org.fh.general.ecom.common.dto.product.mongo.OutputMongoProjectDTO;
import org.fh.general.ecom.common.dto.product.project.OutputProjectProgrammeListDTO;
import org.fh.general.ecom.common.dto.product.web.InputWebProjectDetailDTO;
import org.fh.general.ecom.common.dto.product.web.InputWebProjectListDTO;
import org.fh.general.ecom.common.dto.product.web.InputWebProjectProgrammePageDTO;
import org.fh.general.ecom.common.dto.product.web.OutputWebProjectDetailAllDTO;
import org.fh.general.ecom.common.enums.OutEnum;
import org.fh.general.ecom.common.enums.ProjectEnum;
import org.fh.general.ecom.common.po.product.project.ProjectFilesListOutputPO;
import org.fh.general.ecom.common.po.product.project.ProjectProgrammeListOutputPO;
import org.fh.general.ecom.common.utils.DateUtils;
import org.fh.general.ecom.common.vo.product.appraise.ProjectAppraiseDetailVO;
import org.fh.general.ecom.common.vo.product.project.ProjectFilesVO;
import org.fh.general.ecom.common.vo.product.project.ProjectProgrammeVO;
import org.fh.general.ecom.common.vo.product.web.ProjectWebDetailVO;
import org.fh.general.ecom.common.vo.product.web.ProjectWebListVO;
import org.fh.general.ecom.product.service.*;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * @Author huliping
 * @DATE 2018/9/25
 **/
@RestController
public class ProjectWebController {

    @Autowired
    private ProjectService projectService;
    @Autowired
    private ConsultingProjectService consultingProjectService;
    @Autowired
    private ProjectMongoDBService projectMongoDBService;
    @Autowired
    private ProjectProgrammeService projectProgrammeService;

    @Autowired
    private ProjectAppraiseService projectAppraiseService;

    @RequestMapping("WEBP0001")
    public BaseVO addConsultingProject(InputConsultingProjectAddDTO dto){
        BaseVO baseVo = new BaseVO();
        String  code= consultingProjectService.addConsulting(dto);
        if(!OutEnum.SUCCESS.getCode().equals(code)){
            getTipMsg(baseVo,code);
        }else{
            baseVo.success();
        }
        return baseVo;
    }

    @RequestMapping("WEBP0002")
    public PagingVO findWebPage(InputWebProjectListDTO dto){
        PagingVO pagingVO=new PagingVO();
        InputMongoDBProjectDTO request = new InputMongoDBProjectDTO();
        BeanUtils.copyProperties(dto,request);
        OutputMongoDBPageDTO response =projectMongoDBService.findListFromMongoDB(request);
        List<OutputMongoProjectDTO> list = ( List<OutputMongoProjectDTO>)response.getList();
       if(list!=null && list.size()>0) {
           pagingVO.success(findRemainingTimeAndSchedule(list),response.getPageInfo());
       }else{
           pagingVO.noData();
       }
        return pagingVO;
    }



    @RequestMapping("WEBP0003")
    public BaseVO findWebDetail(InputWebProjectDetailDTO dto ){
        BaseVO baseVo= new BaseVO();
        OutputWebProjectDetailAllDTO response = projectService.findWebDetail(dto);
        if(response==null){
            baseVo.noData();
        }
        ProjectWebDetailVO vo = new ProjectWebDetailVO();
        BeanUtils.copyProperties(response,vo);

        List<ProjectFilesListOutputPO> list =  response.getOpenList();
        if(list!=null && list.size()>0) {
            List<ProjectFilesVO> listVo = new ArrayList<ProjectFilesVO>();
            list.forEach((ProjectFilesListOutputPO temp) -> {
                ProjectFilesVO dto1 = new ProjectFilesVO();
                BeanUtils.copyProperties(temp, dto1);
                listVo.add(dto1);
            });
            vo.setOpenList(listVo);
        }
        list =  response.getPrivateList();
        if(list!=null && list.size()>0) {
            List<ProjectFilesVO> listVo1 = new ArrayList<ProjectFilesVO>();
            list.forEach((ProjectFilesListOutputPO temp) -> {
                ProjectFilesVO dto1 = new ProjectFilesVO();
                BeanUtils.copyProperties(temp, dto1);
                listVo1.add(dto1);
            });
            vo.setPrivateList(listVo1);
        }
        baseVo.setData(vo);
        baseVo.success();
        return baseVo;
    }


    @RequestMapping("WEBP0004")
    public PagingVO findWebHotProjectPage(InputWebProjectDetailDTO dto ){
        PagingVO pagingVO=new PagingVO();
        OutputMongoDBPageDTO response =projectMongoDBService.findWebHotProjectPage(dto);
        List<OutputMongoProjectDTO> list = ( List<OutputMongoProjectDTO>)response.getList();
        if(list!=null && list.size()>0) {
            pagingVO.success( findRemainingTimeAndSchedule(list),response.getPageInfo());
        }else{
            pagingVO.noData();
        }
           return pagingVO;
    }

    private List<ProjectWebListVO>  findRemainingTimeAndSchedule(List<OutputMongoProjectDTO> list) {
        List<ProjectWebListVO> listVo = new ArrayList<ProjectWebListVO>();
        list.forEach((OutputMongoProjectDTO temp) -> {
            ProjectWebListVO vo = new ProjectWebListVO();
            BeanUtils.copyProperties(temp, vo);
            vo.setId(Long.valueOf(temp.getId()));
            BigDecimal total = this.projectProgrammeService.findTotalAmount(temp.getId());
            BigDecimal amount = this.projectService.findFinishedAmount(temp.getProjectStatus(), temp.getId() + "");
            amount = amount==null?BigDecimal.ZERO:amount;

            if(total.compareTo(BigDecimal.ZERO)!=0){
                vo.setSchedule(amount.divide(total).multiply(new BigDecimal(100)).setScale(2, BigDecimal.ROUND_UP) + "");
            }else{
                vo.setSchedule("0.00");
            }

            if (ProjectEnum.ProjectStatus.APPOINTMENT.getValue().equals(temp.getProjectStatus())) {
                vo.setRemainingTime(DateUtils.getBetweenTime(new Date(), temp.getEndTime()));
            } else if (ProjectEnum.ProjectStatus.SUBSCRIBE.getValue().equals(temp.getProjectStatus())) {
                vo.setRemainingTime(DateUtils.getBetweenTime(new Date(), temp.getPurchaseEndTime()));
            }else if (ProjectEnum.ProjectStatus.APPOINTMENT_SUBSCRIBE.getValue().equals(temp.getProjectStatus())) {
             //预约结束时间+48小时
                vo.setRemainingTime(DateUtils.getBetweenTime(DateUtils.getAfterTime(temp.getEndTime(),48L),new Date() ));
            }
            listVo.add(vo);
        });
        return listVo;
    }


    private void  getTipMsg(BaseVO baseVo, String code) {
        if(OutEnum.TIPS.getCode().equals(code)){
            baseVo.setBusAlert("项目名称不得重复");
        }else if(OutEnum.WARN.getCode().equals(code)) {
            baseVo.error(OutEnum.WARN.getMessage());
        }else{
            baseVo.error(OutEnum.FAIL.getMessage());
        }
    }


    @RequestMapping("WEBP0005")
    public PagingVO findWebProjectProgrammePage(InputWebProjectProgrammePageDTO dto ){
        PagingVO  pagingVO= new PagingVO();
        OutputProjectProgrammeListDTO response =projectProgrammeService.findWebProjectProgrammePage(dto);
        List<ProjectProgrammeVO> listvo= new ArrayList<ProjectProgrammeVO>();
        List<ProjectProgrammeListOutputPO>  list = response.getProjectProgrammeListOutputPOList();
        if(list!=null && list.size()>0) {
            list.forEach((ProjectProgrammeListOutputPO temp) -> {
                ProjectProgrammeVO vo = new ProjectProgrammeVO();
                BeanUtils.copyProperties(temp, vo);
                vo.setUnitPrice(temp.getUnitPrice()+"");
                vo.setExpectedReturnRate(temp.getExpectedReturnRate()+"");
                vo.setMinRedRate(temp.getMinRedRate()+"");
                vo.setSchedule(new BigDecimal(vo.getNumber()-Long.valueOf(vo.getTotal())).divide(new BigDecimal(vo.getNumber()+"")).multiply(new BigDecimal(100)).setScale(2,BigDecimal.ROUND_HALF_UP)+"");
                listvo.add(vo);
            });
            pagingVO.success(listvo, response.getPageInfo());
        }else{
            pagingVO.noData();
        }
        return pagingVO;
    }


    @RequestMapping("WEBP0006")
    public BaseVO  addProjectAppraiseEntity(InputProjectAppraiseAddDTO dto ){
        BaseVO baseVO = new BaseVO();
        String code = this.projectAppraiseService.addEntity(dto);
        if(!OutEnum.SUCCESS.getCode().equals(code)){
            baseVO.error(code);
            return baseVO;
        }
        baseVO.success();
        return baseVO;
    }

    @RequestMapping("WEBP0007")
    public PagingVO  findAppraisePage(InputProjectAppraiseListDTO dto ){
        PagingVO pageVO = new PagingVO();
        dto.setAppraiseType(ProjectEnum.ProjectAppraiseType.APPRAISE_TYPE.getValue());
        OutputProjectAppraiseListDTO response = this.projectAppraiseService.findPage(dto);
        List<ProjectAppraiseDetailVO> listvo= new ArrayList<ProjectAppraiseDetailVO>();
        List<OutputProjectAppriaiseDetailDTO>  list = response.getList();
        if(list!=null && list.size()>0) {
            list.forEach((OutputProjectAppriaiseDetailDTO temp) -> {
                ProjectAppraiseDetailVO vo = new ProjectAppraiseDetailVO();
                BeanUtils.copyProperties(temp, vo);
                if(temp.getReplyList()!=null){
                    List<ProjectAppraiseDetailVO> replyList= new ArrayList<ProjectAppraiseDetailVO>();
                    temp.getReplyList().forEach((OutputProjectAppriaiseDetailDTO outputProjectAppriaiseDetailDTO) -> {
                        ProjectAppraiseDetailVO reply = new ProjectAppraiseDetailVO();
                        BeanUtils.copyProperties(outputProjectAppriaiseDetailDTO, reply);
                        replyList.add(reply);
                    });
                    vo.setReplyList(replyList);
                }
                listvo.add(vo);
            });
            pageVO.success(listvo, response.getPageInfo());
        }else{
            pageVO.noData();
        }
        return pageVO;
    }



}
