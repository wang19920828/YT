package org.fh.general.ecom.product.service.impl;

import com.alibaba.fastjson.JSONObject;
import org.fh.general.ecom.common.base.PageVO;
import org.fh.general.ecom.common.base.PagingVO;
import org.fh.general.ecom.common.dto.product.mongo.InputMongoDBProjectDTO;
import org.fh.general.ecom.common.dto.product.mongo.OutputMongoProjectDTO;
import org.fh.general.ecom.common.mongo.MongoDbUtil;
import org.fh.general.ecom.common.utils.DateUtils;
import org.fh.general.ecom.common.utils.ObjectUtils;
import org.fh.general.ecom.common.utils.StringUtils;
import org.fh.general.ecom.product.service.ProjectMongoDBService;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * @Author huliping
 * @DATE 2018/9/25
 **/
@Service
public class ProjectMongoDBServiceImpl implements ProjectMongoDBService {
    @Override
    public void updateOne(OutputMongoProjectDTO dto) {
        this.insertOne(dto);
    }
    @Override
    public void insertOne(OutputMongoProjectDTO dto) {
        Map<String,Object>  map  = ObjectUtils.beanToMap(dto);
        try {
            Map<String,Object> delMap = new HashMap<String,Object>();
            delMap.put("id",dto.getId());
            delMap.put("branch",dto.getBranch());
            MongoDbUtil.deleteMany("tb_product",delMap);
            MongoDbUtil.insertOne("tb_product",map);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public  List<String>  getListString(String str){
        List<String> list=new ArrayList<String>();
        if(StringUtils.isNotEmpty(str)){
            String[] strArr = str.split(",");
            for(String s:strArr){
                list.add(s);
            }
        }
        return list;
    }
    @Override
    public PagingVO  findListFromMongoDB(InputMongoDBProjectDTO dto) {
        PagingVO pagingVO=new PagingVO();
        PageVO pageVO=new PageVO();
        Map<String,Object>  map  = ObjectUtils.beanToMongoMap(dto);
        try {
            String sortType = "id";
            String sortDesc="1";
            map = getSearchMap(map);
            sortType = getSortTypeValue(map, sortType);
            sortDesc = getSortDescValue(map, sortDesc);

            long totalCount = MongoDbUtil.findCount("tb_product",map);
            if(totalCount>0) {
                pageVO.setPageNum(dto.getCurrentPageNum());
                pageVO.setPageSize(dto.getPageSize());
                pageVO.setTotal(totalCount);
                pageVO.setPages(Integer.valueOf((totalCount % dto.getPageSize() > 0 ? totalCount / dto.getPageSize() + 1 : totalCount / dto.getPageSize()) + ""));
                Map<String, Object> sortMap = new HashMap<String, Object>();
                sortMap.put(sortType+".SORT", Integer.valueOf(sortDesc));
                List<String> list = MongoDbUtil.findListPageSort("tb_product", map, sortMap);
                List<OutputMongoProjectDTO> outputMongoProjectDTOList=new ArrayList<OutputMongoProjectDTO>() ;
                list.forEach((String obj)->{
                    JSONObject jsonObject = JSONObject.parseObject(obj);
                    OutputMongoProjectDTO outputMongoProjectDTO =   JSONObject.toJavaObject(jsonObject,OutputMongoProjectDTO.class);
                    if(obj.contains("$date")){
                        changeDateFormat(jsonObject, outputMongoProjectDTO);
                    }
                    outputMongoProjectDTOList.add(outputMongoProjectDTO);
                });
                pagingVO.setData(outputMongoProjectDTOList);
                pagingVO.setPage(pageVO);
            }else{
                pagingVO.noData();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return pagingVO;
    }

    private void changeDateFormat(JSONObject jsonObject, OutputMongoProjectDTO outputMongoProjectDTO) {
        String startTime = jsonObject.get("startTime").toString();
        String st  = JSONObject.parseObject(startTime).get("$date").toString();
        Date stDate = DateUtils.getDate(Long.valueOf(st));
        outputMongoProjectDTO.setStartTime(stDate);

        String endTime = jsonObject.get("endTime").toString();
        String et  = JSONObject.parseObject(endTime).get("$date").toString();
        Date  etDate = DateUtils.getDate(Long.valueOf(et));
        outputMongoProjectDTO.setEndTime(etDate);

        String purchaseStart = jsonObject.get("purchaseStartTime").toString();
        String ps  = JSONObject.parseObject(purchaseStart).get("$date").toString();
        Date  psDate = DateUtils.getDate(Long.valueOf(ps));
        outputMongoProjectDTO.setPurchaseStartTime(psDate);

        String purchaseEndTime = jsonObject.get("purchaseEndTime").toString();
        String pe  = JSONObject.parseObject(purchaseEndTime).get("$date").toString();
        Date  peDate = DateUtils.getDate(Long.valueOf(pe));
        outputMongoProjectDTO.setPurchaseEndTime(peDate);
    }

    private String getSortDescValue(Map<String, Object> map, String sortDesc) {
        if(map.containsKey("sortDesc") && map.get("sortDesc")!=null && !"".equals(map.get("sortDesc"))){
            sortDesc = map.get("sortDesc").toString();
            map.remove("sortDesc");
        }
        return sortDesc;
    }

    private String getSortTypeValue(Map<String, Object> map, String sortType) {
        if(map.containsKey("sortType") && map.get("sortType")!=null && !"".equals(map.get("sortType"))){
           sortType = map.get("sortType").toString();
            map.remove("sortType");
        }
        return sortType;
    }

    private Map<String, Object>  getSearchMap(Map<String, Object> map) {
        if(map.containsKey("projectName") && map.get("projectName")!=null && !"".equals(map.get("projectName"))){
            map.put("like.projectName",map.get("projectName").toString());
            map.remove("projectName");
        }
        if(map.containsKey("projectTypes") && map.get("projectTypes")!=null && !"".equals(map.get("projectTypes"))){
            map.put("IN.projectType",getListString(map.get("projectTypes").toString()));
            map.remove("projectTypes");
        }
        if(map.containsKey("rightsTypes") && map.get("rightsTypes")!=null && !"".equals(map.get("rightsTypes"))){
            map.put("IN.rightsType",getListString(map.get("rightsTypes").toString()));
            map.remove("rightsTypes");
        }
        if(map.containsKey("areaAddresses") && map.get("areaAddresses")!=null && !"".equals(map.get("areaAddresses"))){
            map.put("IN.areaAddress",getListString(map.get("areaAddresses").toString()));
            map.remove("areaAddresses");
        }
        return map;
    }

    public void delOne(OutputMongoProjectDTO dto){
        Map<String,Object> delMap = new HashMap<String,Object>();
        delMap.put("id",dto.getId());
        delMap.put("branch",dto.getBranch());
        try {
            MongoDbUtil.deleteMany("tb_product",delMap);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
