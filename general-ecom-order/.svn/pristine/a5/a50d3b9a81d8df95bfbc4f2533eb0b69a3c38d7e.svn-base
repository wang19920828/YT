package org.fh.general.ecom.order.service.impl;

import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import lombok.extern.slf4j.Slf4j;
import org.fh.general.ecom.common.dto.order.order.OrderEntityOutDTO;
import org.fh.general.ecom.common.dto.order.orderMy.HavePayOrderInputDTO;
import org.fh.general.ecom.common.dto.order.orderMy.HavePayOrderOutputDTO;
import org.fh.general.ecom.common.dto.order.orderMy.MyOrderPageInputDTO;
import org.fh.general.ecom.common.dto.order.orderMy.MyOrderPageOutputDTO;
import org.fh.general.ecom.common.dto.order.orderMy.UnPayOrderInputDTO;
import org.fh.general.ecom.common.dto.order.orderMy.UnPayOrderOutputDTO;
import org.fh.general.ecom.common.dto.order.orderProduct.OrderProductDTO;
import org.fh.general.ecom.common.enumeration.order.OrderEnum;
import org.fh.general.ecom.common.enums.ProjectEnum;
import org.fh.general.ecom.common.po.order.orderMy.HavePayAppEntityPO;
import org.fh.general.ecom.common.po.order.orderMy.HavePayRenGouEntityPO;
import org.fh.general.ecom.common.po.order.orderMy.HavePayYuYueEntityPO;
import org.fh.general.ecom.common.po.order.orderMy.MyOrderPO;
import org.fh.general.ecom.common.po.order.orderMy.MyOrderParamPO;
import org.fh.general.ecom.common.po.order.orderMy.UnPayAppEntityPO;
import org.fh.general.ecom.common.po.order.orderMy.UnPayRenGouEntityPO;
import org.fh.general.ecom.common.po.order.orderMy.UnPayYuYueEntityPO;
import org.fh.general.ecom.common.utils.StringUtils;
import org.fh.general.ecom.common.vo.product.project.ProjectOneDetailVO;
import org.fh.general.ecom.order.client.BasicsClient;
import org.fh.general.ecom.order.client.ProductClient;
import org.fh.general.ecom.order.dao.OrderDao;
import org.fh.general.ecom.order.model.Order;
import org.fh.general.ecom.order.service.OrderMyService;
import org.fh.general.ecom.order.service.OrderProductService;
import org.fh.general.ecom.order.service.OrderService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Slf4j
@Service
public class OrderMyServiceImpl extends ServiceImpl<OrderDao, Order> implements OrderMyService {
    @Autowired
    private ProductClient productClient;
    @Autowired
    private BasicsClient basicsClient;
    @Autowired
    private OrderService orderService;
    @Autowired
    private OrderProductService orderProductService;

    @Override
    public MyOrderPageOutputDTO findMyOrderPage(MyOrderPageInputDTO dto) {
        MyOrderParamPO paramPO=new MyOrderParamPO();
        BeanUtils.copyProperties(dto,paramPO);
        PageHelper.startPage(dto.getCurrentPageNum(), dto.getPageCount());
        //1-待支付订单(正常状态+未支付)
        if("1".equals(dto.getTypeFlag())){
            paramPO.setOrderStatus(OrderEnum.OrderStataus.ORDER_STATUS_NORMAL.getValue());
            paramPO.setPayStatus(OrderEnum.PayStatus.PAY_STATUS_NO.getValue());
        }
        //2-成功订单（认购成功状态+已支付）
        if("2".equals(dto.getTypeFlag())){
            paramPO.setOrderStatus(OrderEnum.OrderStataus.ORDER_STATUS_BUYSUCCESS.getValue());
            paramPO.setPayStatus(OrderEnum.PayStatus.PAY_STATUS_OK.getValue());
        }
        //3-退款订单（退款申请中+ 已经退款）
        if("3".equals(dto.getTypeFlag())){
            paramPO.setPayStatusMore("more");
        }
        //4-失效订单（失效状态）
        if("4".equals(dto.getTypeFlag())){
            paramPO.setOrderStatus(OrderEnum.OrderStataus.ORDER_STATUS_CANCEL.getValue());
        }
        List<MyOrderPO> list=baseMapper.findMyOrderPage(paramPO);
        PageInfo pageInfo=new PageInfo(list);
        MyOrderPageOutputDTO response=new MyOrderPageOutputDTO();
        if(list !=null && list.size()>0){
            response.setList(list);
            response.setPageInfo(pageInfo);
        }
        return response;
    }


    @Override
    public UnPayOrderOutputDTO findUnPayOrderDetail(UnPayOrderInputDTO dto){
        UnPayOrderOutputDTO resDto=new UnPayOrderOutputDTO();
        OrderEntityOutDTO order=this.orderService.findEntityByOrderSn(dto.getOrderSn());
        if(order==null){
            resDto.exception("订单编号["+dto.getOrderSn()+"]有误，查无数据");
            return resDto;
        }
        if(order.getPayStatus().equals(OrderEnum.PayStatus.PAY_STATUS_OK.getValue())){
            resDto.exception("您调错接口了，该订单已支付，需调接口FRO8007");
            return resDto;
        }
        OrderProductDTO opEntity=this.orderProductService.findEntityByOrderSn(dto.getOrderSn());
        if(opEntity==null || order==null){
            resDto.exception("订单["+dto.getOrderSn()+"]或者订单产品信息有误，查无数据！");
            return resDto;
        }
        ProjectOneDetailVO  project=this.productClient.findDetailByProjectId(order.getProductId());
        if(project==null){
            resDto.exception("["+order.getProductId()+"]项目基础信息表有误，查无数据");
            return resDto;
        }

        BeanUtils.copyProperties(order,resDto);
        resDto.setProImg(opEntity.getProImg());
        resDto.setBuyNum(opEntity.getNum());
        resDto.setPlanName(opEntity.getProductPlan());
        resDto.setUnitPrice(opEntity.getLessMoney());
        resDto.setProjectStatus(project.getProjectStatus());
        resDto.setProjectStatusName(ProjectEnum.ProjectStatus.codeOf(project.getProjectStatus()).getName());
        if(order.getOrderType().equals(OrderEnum.OrderType.APPOINTMENTAMOUNT.getValue())){
            // 预约订单
            UnPayYuYueEntityPO entity=new UnPayYuYueEntityPO();
            entity.setAddTime(order.getAddTime());
            entity.setAllPrice(order.getAllPrice());
            entity.setInvestMoney(order.getInvestMoney());//预约总金额（eg：预约金300则预约总金额是3万）
            Long subTime=System.currentTimeMillis()-order.getAddTime().getTime();
            log.info("订单["+dto.getOrderSn()+"]倒计时毫秒数为："+subTime);
            entity.setCountdown(subTime);//倒计时
            resDto.setYuYueEntity(entity);
        }
        if(order.getOrderType().equals(OrderEnum.OrderType.APPOINTMENTAMOUNT_BUY.getValue())){
            // 预约认购订单
            UnPayAppEntityPO entity=new UnPayAppEntityPO();
            entity.setAddTime(order.getAddTime());
            entity.setInvestMoney(order.getInvestMoney());
            entity.setYuyuePrice(order.getYuyuePrice());
            entity.setAllPrice(order.getAllPrice());
            Long subTime=System.currentTimeMillis()-order.getAddTime().getTime();
            log.info("订单["+dto.getOrderSn()+"]倒计时毫秒数为："+subTime);
            entity.setCountdown(subTime);
            resDto.setAppEntity(entity);
        }
        if(order.getOrderType().equals(OrderEnum.OrderType.OPEN_BUY.getValue())){
            // 公开认购订单
            UnPayRenGouEntityPO entity=new UnPayRenGouEntityPO();
            entity.setAddTime(order.getAddTime());
            entity.setInvestMoney(order.getInvestMoney());
            entity.setAllPrice(order.getAllPrice());
            Long subTime=System.currentTimeMillis()-order.getAddTime().getTime();
            log.info("订单["+dto.getOrderSn()+"]倒计时毫秒数为："+subTime);
            entity.setCountdown(subTime);
            resDto.setRenGouEntity(entity);
        }
        resDto.success();
        return resDto;
    }

    @Override
    public HavePayOrderOutputDTO findHavePayOrderDetail(HavePayOrderInputDTO dto){
        HavePayOrderOutputDTO resDto=new HavePayOrderOutputDTO();
        OrderEntityOutDTO order=this.orderService.findEntityByOrderSn(dto.getOrderSn());
        if(order==null){
            resDto.exception("订单编号["+dto.getOrderSn()+"]有误，查无数据");
            return resDto;
        }
        if(order.getOrderStatus().equals(OrderEnum.PayStatus.PAY_STATUS_NO.getValue())){
            resDto.exception("您调错接口了，该订单未支付，需调接口FRO8006");
            return resDto;
        }
        OrderProductDTO opEntity=this.orderProductService.findEntityByOrderSn(dto.getOrderSn());
        if(opEntity==null){
            resDto.exception("订单编号["+dto.getOrderSn()+"]在tb_invest_product表查无数据");
            return resDto;
        }
        ProjectOneDetailVO project=this.productClient.findDetailByProjectId(order.getProductId());
        if(project==null){
            resDto.exception("项目["+order.getProductId()+"]基础信息有误，在tb_project表查无数据");
            return resDto;
        }
        resDto.setProImg(opEntity.getProImg());
        resDto.setBuyNum(opEntity.getNum());
        resDto.setPlanName(opEntity.getProductPlan());
        resDto.setUnitPrice(opEntity.getLessMoney());
        resDto.setAcceptName(order.getAcceptName());
        resDto.setAcceptPhone(order.getAcceptPhone());
        resDto.setAddress(order.getAddress());
        resDto.setProjectName(opEntity.getProductName());
        resDto.setProjectStatus(project.getProjectStatus());
        resDto.setProjectStatusName(ProjectEnum.ProjectStatus.codeOf(project.getProjectStatus()).getName());


        if(order.getOrderType().equals(OrderEnum.OrderType.APPOINTMENTAMOUNT.getValue())) {
            // 预约订单
            HavePayYuYueEntityPO entity=new HavePayYuYueEntityPO();
            BeanUtils.copyProperties(order,entity);
            if(order.getOrderStatus().equals(OrderEnum.PayStatus.PAY_STATUS_OK.getValue())){
                entity.setAllPriceReal(order.getAllPrice());
            }
            /*entity.setAddTime(order.getAddTime());
            entity.setAllPrice(order.getAllPrice());
            entity.setInvestMoney(order.getInvestMoney());
            entity.setPayName(order.getPayName());
            entity.setPayTime(order.getPayTime());*/
            resDto.setYuYueEntity(entity);
        }
        if(order.getOrderType().equals(OrderEnum.OrderType.APPOINTMENTAMOUNT_BUY.getValue())) {
            // 预约认购订单
            HavePayAppEntityPO entity=new HavePayAppEntityPO();
            if(StringUtils.isNotEmpty(order.getOldcode())){
                OrderEntityOutDTO oldOrder=this.orderService.findEntityByOrderSn(order.getOldcode());
                entity.setPrePrice(oldOrder.getInvestMoney());
                entity.setPreDingJinPriceShould(oldOrder.getAllPrice());
                if(order.getPayStatus().equals(OrderEnum.PayStatus.PAY_STATUS_OK.getValue())){
                    entity.setPreDingJinPriceReal(oldOrder.getAllPrice());
                }
                entity.setPrePayName(oldOrder.getPayName());
                entity.setPreAddTime(oldOrder.getAddTime());
                entity.setPrePayTime(oldOrder.getPayTime());
            }else{
                resDto.exception("预约认购订单["+order.getOrderSn()+"]信息有误，找不到原始预约单");
                return resDto;
            }
            entity.setRgInvestMoney(order.getInvestMoney());
            entity.setRgYuyuePrice(order.getYuyuePrice());
            entity.setRgSharePrice(order.getShareAll());
            entity.setRgMoneyShould(order.getAllPrice());
            if(order.getPayStatus().equals(OrderEnum.PayStatus.PAY_STATUS_OK.getValue())){
                entity.setRgMoneyReal(order.getAllPrice());
            }
            entity.setRgPayName(order.getPayName());
            entity.setRgAddTime(order.getAddTime());
            entity.setRgPayTime(order.getPayTime());

            resDto.setAppEntity(entity);
        }
        if(order.getOrderType().equals(OrderEnum.OrderType.OPEN_BUY.getValue())) {
            // 公开认购订单
            HavePayRenGouEntityPO entity=new HavePayRenGouEntityPO();
            BeanUtils.copyProperties(order,entity);
            entity.setAllPriceShould(order.getAllPrice());
            if(order.getPayStatus().equals(OrderEnum.PayStatus.PAY_STATUS_OK.getValue())){
                entity.setAllPriceReal(order.getAllPrice());
            }
           /* entity.setInvestMoney(order.getInvestMoney());
            entity.setShareAll(order.getShareAll());
            entity.setPayName(order.getPayName());
            entity.setPayTime(order.getPayTime());
            entity.setAddTime(order.getAddTime());*/
            resDto.setRenGouEntity(entity);
        }
        resDto.success();
        return resDto;
    }


}
