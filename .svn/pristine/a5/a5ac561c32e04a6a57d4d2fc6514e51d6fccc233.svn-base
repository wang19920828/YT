/*
package org.fh.general.ecom.basics.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang.StringUtils;
import org.fh.general.ecom.basics.model.CmsEmail;
import org.fh.general.ecom.basics.service.CmsEmailService;
import org.fh.general.ecom.basics.service.EmailService;
import org.fh.general.ecom.common.utils.DateUtils;
import org.fh.general.ecom.common.utils.SQueueThreadPool;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.*;
import java.io.*;
import java.net.URL;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;

@Slf4j
@Service("emailService")
public class EmailServiceImpl implements EmailService {
	 */
/*

	@Autowired
	private CmsEmailService cmsEmailService;

	private MimeMessage mimeMsg;
	private Session session;
	private Properties props;
	private String username;
	private String password;
	private Multipart mp;
	private String channel = "1000";

	*//*
*/
/**
	 * 内部邮件使用
	 *//*
*/
/*
	@Override
	public void sendMail(String subject, String content) {
		sendMailContent(subject, content);
	}

	*//*
*/
/**
	 * 外部邮件使用
	 *//*
*/
/*
	@Override
	public void sendMail(String paramName, String subject, String content) {
		sendMailContent(paramName, subject, content);
	}

	private void setSmtpHost(String hostName) {
		// log.debug("设置系统属性：mail.smtp.host=" + hostName);
		if (props == null) {
			props = System.getProperties();
		}
		props.put("mail.smtp.host", hostName);
	}

	private boolean createMimeMessage() {
		try {
			// log.debug("准备获取邮件会话对象！");
			session = Session.getDefaultInstance(props, null);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		// log.debug("准备创建MIME邮件对象！");
		try {
			mimeMsg = new MimeMessage(session);
			mp = new MimeMultipart();
			mimeMsg.setSentDate(new Date());
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	*//*
*/
/* 定义SMTP是否需要验证 *//*
*/
/*
	private void setNeedAuth(boolean need) {
		// log.debug("设置smtp身份认证：mail.smtp.auth = " + need);
		if (props == null)
			props = System.getProperties();
		if (need) {
			props.put("mail.smtp.auth", "true");
		} else {
			props.put("mail.smtp.auth", "false");
		}
	}

	private void setNamePass(String name, String pass) {
		username = name;
		password = pass;
	}

	*//*
*/
/* 定义邮件主题 *//*
*/
/*
	private boolean setSubject(String mailSubject) {
		// log.debug("定义邮件主题！");
		try {
			mimeMsg.setSubject(mailSubject);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	*//*
*/
/* 定义邮件正文 *//*
*/
/*
	private boolean setBody(String mailBody,Map<String, String> fileMap) {
		try {
			BodyPart bp = new MimeBodyPart();

			bp.setContent(mailBody.toString(), "text/html;charset=gb2312");
			mp.addBodyPart(bp);

			String webRoot = System.getProperty("springmvc.root");
			String ends = "";
			if (!webRoot.endsWith("/") && !webRoot.endsWith("\\")) {
				ends = "/";
			}
			if(fileMap!=null){
				Iterator<String> it=fileMap.keySet().iterator();
				while(it.hasNext()){
					String key=it.next();
					String path=fileMap.get(key);
					String filename =webRoot+ends+ DateUtils.formatDateForWx(System.currentTimeMillis()) + key.substring(key.lastIndexOf("."), key.length());//123.pdf
					File f=new File(filename);

					inputstreamtofile(path, f);
				    BodyPart attachmentBodyPart = new MimeBodyPart();
	                DataSource source = new FileDataSource(f);
	                attachmentBodyPart.setDataHandler(new DataHandler(source));
	                attachmentBodyPart.setFileName(MimeUtility.encodeWord(key));
	                mp.addBodyPart(attachmentBodyPart);
	                SQueueThreadPool.execute(new FileHandle(f));
				}
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

    public void inputstreamtofile(String httpurl,File file){
    	try {
    		InputStream ins=new URL(httpurl).openStream();
			OutputStream os = new FileOutputStream(file);
			int bytesRead = 0;
			byte[] buffer = new byte[8192];
			while ((bytesRead = ins.read(buffer, 0, 8192)) != -1) {
			os.write(buffer, 0, bytesRead);
			}
			os.close();
			ins.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
    	}

	*//*
*/
/* 设置发信人 *//*
*/
/*
	private boolean setFrom(String from, String emailName) {
		try {

			Address from_address = new InternetAddress(from, emailName);
			mimeMsg.setFrom(from_address); // 发信人
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	*//*
*/
/* 定义收信人 *//*
*/
/*
	private boolean setTo(String to) {
		if (to == null)
			return false;
		try {
			mimeMsg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	*//*
*/
/* 定义抄送人 *//*
*/
/*
	private boolean setCopyTo(String copyto) {
		if (copyto == null)
			return false;
		try {
			mimeMsg.setRecipients(Message.RecipientType.CC, (Address[]) InternetAddress.parse(copyto));
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	*//*
*/
/* 发送邮件模块 *//*
*/
/*
	private boolean sendOut(String copyto) {
		try {
			mimeMsg.setContent(mp);
			mimeMsg.saveChanges();
			Session mailSession = Session.getInstance(props, null);
			Transport transport = mailSession.getTransport("smtp");
			System.out.println("开始链接");
			transport.connect((String) props.get("mail.smtp.host"), username, password);
			System.out.println("连接结束");
			transport.sendMessage(mimeMsg, mimeMsg.getRecipients(Message.RecipientType.TO));
			if (StringUtils.isNotBlank(copyto)) {
				transport.sendMessage(mimeMsg, mimeMsg.getRecipients(Message.RecipientType.CC));
			}

			transport.close();
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	*//*
*/
/* 调用sendOut方法完成发送 *//*
*/
/*
	private boolean sendAndCc(String smtp, String from, String to, String copyto, String subject, String content,
			String username, String password, String emailName,Map<String, String> fileMap) {
		log.info("sendAndCc to:"+to+",copyto:"+copyto);
		setSmtpHost(smtp);
		createMimeMessage();
		setNeedAuth(true); // 验证
		if (!setSubject(subject))
			return false;
		if (!setBody(content,fileMap))
			return false;
		if (!setTo(to))
			return false;
		if (StringUtils.isNotBlank(copyto) && !setCopyTo(copyto))
			return false;
		if (!setFrom(from, emailName))
			return false;
		setNamePass(username, password);
		if (!sendOut(copyto))
			return false;
		return true;
	}

	*//*
*/
/**
	 * 内部方法调用
	 *//*
*/
/*
	public void sendMailContent(String content) {
		sendMailContent(null, content);
	}

	public void sendMailContent(String content, Exception e) {
		if (e != null) {
			content = content + "<br>" + getStackTrace(e);
		}
		sendMailContent(content);
	}

	public void sendMailContent(String subject, String content) {
		CmsEmail ce = cmsEmailService.selectByChannel(channel);
		if (ce != null) {

			String smtp = ce.getSmtp();// smtp服务器
			String from = ce.getName();
			// 邮件显示名称
			if (StringUtils.isEmpty(subject)) {
				subject = "复华信息中心消息提醒";// 邮件标题
			}
			String username = from;// 发件人真实的账户名
			String password = ce.getPwd();// 发件人密码
			sendAndCc(smtp, from, ce.getSendto(), ce.getCopyto(), subject, content, username, password, username,null);

		}
	}

	public void sendMailContent(String paramName, String subject, String content) {
		CmsEmail ce = cmsEmailService.selectByChannel(paramName);
		if (ce != null) {
			String smtp = ce.getSmtp();// smtp服务器
			String from = ce.getName();
			// 邮件显示名称
			if (StringUtils.isEmpty(subject)) {
				subject = "复华信息中心消息提醒";// 邮件标题
			}
			String username = from;// 发件人真实的账户名
			String password = ce.getPwd();// 发件人密码
			sendAndCc(smtp, from, ce.getSendto(), ce.getCopyto(), subject, content, username, password, username,null);

		}
	}

	public void sendMailContent(String subject, String content, Exception e) {
		if (e != null) {
			content = content + "<br>" + getStackTrace(e);
		}
		sendMailContent(subject, content);
	}

	private String getStackTrace(Exception e) {
		StringWriter writer = new StringWriter();
		e.printStackTrace(new PrintWriter(writer, true));
		return writer.toString();
	}

	@Override
	public void sendEMail(String channel, String sendTo, String subject, String content,Map<String, String> fileMap) {
		CmsEmail ce = cmsEmailService.selectByChannel(channel);
		if (ce != null) {
			String smtp = ce.getSmtp();// smtp服务器
			String from = ce.getName();
			// 邮件显示名称
			if (StringUtils.isEmpty(subject)) {
				subject = "复华信息中心消息提醒";// 邮件标题
			}
			String username = from;// 发件人真实的账户名
			String password = ce.getPwd();// 发件人密码
//			if(fileMap!=null){
//				send(ce, sendTo, subject, content, fileMap);
//			}else{
				sendAndCc(smtp, from, sendTo, "", subject, content, username, password, username,fileMap);
//			}


		}
	}

	*//*
*/
/**
	 * 内部邮件使用
	 *//*
*/
/*
	@Override
	public void sendException(String subject, Exception e) {
		sendMailContent(subject, e);
	}



	 *//*
*/
/* public void send(CmsEmail ce, String sendTo, String subject, String content,Map<String, String> fileMap) {
//		  CmsEmail ce = cmsEmailService.selectByChannel(channel);
		  String host=ce.getSmtp();
		  String user=ce.getName();
		  String pwd=ce.getPwd();

		        Properties props = new Properties();

		        //设置发送邮件的邮件服务器的属性（这里使用网易的smtp服务器）
		        props.put("mail.smtp.host", host);
		        //需要经过授权，也就是有户名和密码的校验，这样才能通过验证（一定要有这一条）
		        props.put("mail.smtp.auth", "true");

		        //用刚刚设置好的props对象构建一个session
		        Session session = Session.getDefaultInstance(props,null);

		        //有了这句便可以在发送邮件的过程中在console处显示过程信息，供调试使
		        //用（你可以在控制台（console)上看到发送邮件的过程）
		        session.setDebug(true);

		        //用session为参数定义消息对象
		        MimeMessage message = new MimeMessage(session);
		        try{
		         //加载发件人地址
		            message.setFrom(new InternetAddress(user));
		            //加载收件人地址
		            message.addRecipient(Message.RecipientType.TO,new InternetAddress(sendTo));
		           //加载标题
		            message.setSubject(subject);

		            // 向multipart对象中添加邮件的各个部分内容，包括文本内容和附件
		            Multipart multipart = new MimeMultipart();


		            //   设置邮件的文本内容
		            BodyPart contentPart = new MimeBodyPart();
//		            contentPart.setText(content);
		            contentPart.setContent(content, "text/html;charset=gb2312");

		            multipart.addBodyPart(contentPart);
		            if(fileMap!=null){
		            	String webRoot = System.getProperty("springmvc.root");
		    			String ends = "";
		    			if (!webRoot.endsWith("/") && !webRoot.endsWith("\\")) {
		    				ends = "/";
		    			}

		            	Iterator<String> it=fileMap.keySet().iterator();
		            	while(it.hasNext()){
							String key=it.next();
							String path=fileMap.get(key);
							String filename =webRoot+ends+ DateUtil.formatDateForWx(System.currentTimeMillis()) + key.substring(key.lastIndexOf("."), key.length());//123.pdf
							File f=new File(filename);
							inputstreamtofile(path, f);
							  //添加附件
				            BodyPart messageBodyPart= new MimeBodyPart();
				            DataSource source = new FileDataSource(f);
				            //添加附件的内容
				            messageBodyPart.setDataHandler(new DataHandler(source));
				            //添加附件的标题
				            //这里很重要，通过下面的Base64编码的转换可以保证你的中文附件标题名在发送时不会变成乱码
				            messageBodyPart.setFileName(MimeUtility.encodeWord(key));
				            multipart.addBodyPart(messageBodyPart);
				            SQueueThreadPool.execute(new FileHandle(f));
						}



		            }


		            //将multipart对象放到message中
		            message.setContent(multipart);
		            //保存邮件
		            message.saveChanges();
		            //   发送邮件
		            Transport transport = session.getTransport("smtp");
		            //连接服务器的邮箱
		            transport.connect(host, user, pwd);
		            //把邮件发送出去
		            transport.sendMessage(message, message.getAllRecipients());
		            transport.close();

		        }catch(Exception e){
		            e.printStackTrace();
		        }
		    } *//*
*/
/*
}


class FileHandle implements Runnable{

	private File file;

	public FileHandle(File file){
		this.file=file;
	}

	@Override
	public void run() {
		try{
			if(file!=null){
				Thread.sleep(2*60*1000);
				file.delete();
			}

		}catch(Exception e){
			e.printStackTrace();
		}

	}
	*//*


}*/
